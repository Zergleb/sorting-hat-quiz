{"version":3,"sources":["Intro/sortingHat.png","Intro/Intro.js","Name/Name.js","Error/Error.js","Question/Question.js","Result/mcgonagall.png","Result/Result.js","utilities.js","apiCalls.js","App/App.js","index.js"],"names":["Intro","className","data-testid","src","sortingHatImg","alt","to","Name","props","updateNameInput","event","setState","nameInput","target","value","handleNameSubmit","preventDefault","state","setUserName","formInvalid","history","push","onSubmit","this","type","name","placeholder","onChange","Component","withRouter","Error","errorMessage","Question","updateAnswerValues","hogwartsHouses","questionNumber","currentAnswers","map","house","answerValues","handleAnswerSubmit","selectedHouse","a","tallyQuestionResults","determineUserHouse","length","onClick","protoTypes","PropTypes","func","isRequired","array","number","Result","listHousemates","data","allCharacters","userHouse","filter","char","_id","houseMates","resultError","fetch","headers","then","response","json","catch","userName","founder","mascot","headOfHouse","houseGhost","value1","value2","value3","value4","color1","color2","toLowerCase","toUpperCase","resetQuiz","mcgonagallImg","object","string","App","enteredName","houseName","questionResults","houseCount","reduce","houseDetails","sortedHouses","Object","keys","sort","house1","house2","find","houseFetchError","allHouses","headhOfHouse","error","exact","path","render","router","basename","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7643cedc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sortingHat.1334848a.png\";","import \"./Intro.scss\"\nimport sortingHatImg from \"./sortingHat.png\"\nimport { Link } from \"react-router-dom\"\n\nconst Intro = () => {\n  return (\n    <section className=\"intro-section\">\n      <section className=\"intro-content\">\n        <div className=\"sorting-song\">\n          <h1>The Hogwarts Sorting Hat's Song</h1>\n          <p data-testid=\"sorting-hats-song\">\n            Oh, you may not think I'm pretty, But don't judge on what you see,\n            I'll eat myself if you can find A smarter hat than me. You can keep\n            your bowlers black, Your top hats sleek and tall, For I'm the\n            Hogwarts Sorting Hat And I can cap them all. There's nothing hidden\n            in your head The Sorting Hat can't see, So try me on and I will tell\n            you Where you ought to be. You might belong in Gryffindor, Where\n            dwell the brave at heart, Their daring, nerve and chivalry Set\n            Gryffindors apart; You might belong in Hufflepuff, Where they are\n            just and loyal, Those patient Hufflepuffs are true And unafraid of\n            toil; Or yet in wise old Ravenclaw, If you've a ready mind, Where\n            those of wit and learning, Will always find their kind; Or perhaps\n            in Slytherin You'll make your real friends, Those cunning folk use\n            any means To achieve their ends. So put me on! Don't be afraid! And\n            don't get in a flap! You're in safe hands (though I have none) For\n            I'm a Thinking Cap!\n          </p>\n        </div>\n        <img\n          src={sortingHatImg}\n          alt=\"Hogwarts Sorting Hat\"\n          className=\"sorting-hat-img\"\n        />\n      </section>\n      <Link to=\"/your-name\" className=\"get-sorted-btn-anchor\">\n        <button className=\"get-sorted-btn\">Get Sorted</button>\n      </Link>\n    </section>\n  );\n};\n\nexport default Intro","import \"./Name.scss\"\nimport React, { Component } from \"react\"\nimport { withRouter } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\n\nclass Name extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nameInput: \"\",\n      formInvalid: false,\n    }\n  }\n\n  updateNameInput = (event) => {\n    this.setState({\n      nameInput: event.target.value,\n    })\n  }\n\n  handleNameSubmit = (event) => {\n    event.preventDefault()\n    if (!this.state.nameInput) {\n      this.setState({\n        formInvalid: true,\n      })\n    } else {\n      this.props.setUserName(this.state.nameInput);\n      this.setState({\n        formInvalid: false,\n      })\n      this.props.history.push(\"/question\");\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"name-form\" onSubmit={this.handleNameSubmit}>\n        <h1>What's Your Name?</h1>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your Name\"\n          onChange={this.updateNameInput}\n          value={this.state.nameInput}\n          className=\"name-input\"\n        />\n        {this.state.nameInput && (\n          <button className=\"name-btn\" data-testid=\"enabled-name-btn\">\n            Enroll!\n          </button>\n        )}\n        {!this.state.nameInput && (\n          <button className=\"disabled-name-btn\" data-testid=\"disabled-name-btn\">\n            Enroll!\n          </button>\n        )}\n        {this.state.formInvalid && (\n          <p>Please enter your name before continuing</p>\n        )}\n      </form>\n    )\n  }\n}\n\nexport default withRouter(Name)\n\nName.propTypes = {\n  setUserName: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n}","import \"./Error.scss\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst Error = ({ errorMessage }) => {\n  return (\n    <section className=\"error-section\">\n      <h1>{errorMessage}</h1>\n      <Link to=\"/\" className=\"error-btn-anchor\">\n        <button className=\"error-btn\">Return To The Sorting Hat</button>\n      </Link>\n    </section>\n  );\n};\n\nexport default Error;\n\nError.propTypes = {\n  errorMessage: PropTypes.string,\n};\n","import \"./Question.scss\"\nimport Error from \"../Error/Error\"\nimport { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\n\nclass Question extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      answerValues: [],\n    };\n  }\n\n  componentDidMount() {\n    this.updateAnswerValues()\n  }\n\n  updateAnswerValues = () => {\n    const { hogwartsHouses, questionNumber } = this.props\n    const currentAnswers = hogwartsHouses.map((house) => {\n      return house[`value${questionNumber}`];\n    });\n    this.setState({\n      answerValues: currentAnswers,\n    });\n  };\n\n  handleAnswerSubmit = async (selectedHouse) => {\n    await this.props.tallyQuestionResults(selectedHouse)\n    this.updateAnswerValues()\n    this.props.determineUserHouse()\n  };\n\n  render() {\n    const { answerValues } = this.state\n    const { questionNumber } = this.props\n    return (\n      <section className=\"question-slide\">\n        {answerValues.length > 0 && (\n          <section>\n            <h1>{`${questionNumber}. What do you value most`}?</h1>\n            <section className=\"question-options\">\n              <Link\n                to={questionNumber < 4 ? \"/question\" : \"/result\"}\n                className=\"question-btn-anchor\"\n              >\n                <button\n                  onClick={() => this.handleAnswerSubmit(\"Gryffindor\")}\n                  className=\"question-btn\"\n                >\n                  {answerValues[0]}\n                </button>\n              </Link>\n              <Link\n                to={questionNumber < 4 ? \"/question\" : \"/result\"}\n                className=\"question-btn-anchor\"\n              >\n                <button\n                  onClick={() => this.handleAnswerSubmit(\"Hufflepuff\")}\n                  className=\"question-btn\"\n                >\n                  {answerValues[1]}\n                </button>\n              </Link>\n              <Link\n                to={questionNumber < 4 ? \"/question\" : \"/result\"}\n                className=\"question-btn-anchor\"\n              >\n                <button\n                  onClick={() => this.handleAnswerSubmit(\"Slytherin\")}\n                  className=\"question-btn\"\n                >\n                  {answerValues[2]}\n                </button>\n              </Link>\n              <Link\n                to={questionNumber < 4 ? \"/question\" : \"/result\"}\n                className=\"question-btn-anchor\"\n              >\n                <button\n                  onClick={() => this.handleAnswerSubmit(\"Ravenclaw\")}\n                  className=\"question-btn\"\n                >\n                  {answerValues[3]}\n                </button>\n              </Link>\n            </section>\n          </section>\n        )}\n        {!answerValues.length && (\n          <Error errorMessage=\"Sorry, something went wrong.\" />\n        )}\n      </section>\n    )\n  }\n}\n\nexport default Question\n\nQuestion.protoTypes = {\n  determineUserHouse: PropTypes.func.isRequired,\n  hogwartsHouses: PropTypes.array.isRequired,\n  questionNumber: PropTypes.number.isRequired,\n  tallyQuestionResults: PropTypes.func.isRequired,\n}\n","export default __webpack_public_path__ + \"static/media/mcgonagall.dcdcf52e.png\";","import \"./Result.scss\"\nimport Error from \"../Error/Error\"\nimport mcgonagallImg from \"./mcgonagall.png\"\nimport { getAllCharacters } from \"../apiCalls\"\nimport { cleanCharacterData } from \"../utilities\"\nimport React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\n\nclass Result extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      houseMates: [],\n      resultError: false,\n    };\n  }\n\n  componentDidMount() {\n    getAllCharacters()\n      .then((data) =>\n        this.setState({\n          houseMates: this.listHousemates(data),\n          resultError: false,\n        })\n      )\n      .catch(\n        this.setState({\n          resultError: true,\n        })\n      );\n  }\n\n  listHousemates = (data) => {\n    const cleanedCharacterData = cleanCharacterData(data, this.props.userHouse);\n    return cleanedCharacterData.map((char) => {\n      return (\n        <li key={char._id} data-testid=\"housemates\">\n          {char.name}\n        </li>\n      );\n    });\n  };\n\n  render() {\n    const { userName } = this.props\n    const {\n      name,\n      founder,\n      mascot,\n      headOfHouse,\n      houseGhost,\n      value1,\n      value2,\n      value3,\n      value4,\n      color1,\n      color2,\n    } = this.props.userHouse\n    return (\n      <section className={name && name.toLowerCase()}>\n        {!this.state.resultError && name && (\n          <section className=\"result-announcement\">\n            <div className=\"announcement-txt\">\n              <h1>{`${name.toUpperCase()}!`}</h1>\n              <p data-testid=\"house-description\">\n                {`Welcome to ${name}, ${userName}!\n                            Founded by the ${mascot}, ${founder}, and led by Professor ${headOfHouse},\n                            ${name}s are known for their ${value1.toLowerCase()}, ${value2.toLowerCase()}, \n                            ${value3.toLowerCase()}, and ${value4.toLowerCase()}. Walking through the common, \n                            you will see lots of ${color1.toLowerCase()} and ${color2.toLowerCase()} \n                            and ${houseGhost}, the house ghost floating through walls.\n                            While at Hogwarts, your fellow ${name}s will be your family.`}\n              </p>\n              <h2>{`Your fellow ${name}s`}</h2>\n              <ul>\n                {this.state.houseMates.length < 1 && (\n                  <p>Finding your housemates...</p>\n                )}\n                {this.state.houseMates}\n              </ul>\n              <p className=\"restart-txt\">Not happy with the result?</p>\n              <Link to=\"/question\" className=\"restart-btn-anchor\">\n                <button onClick={this.props.resetQuiz} className=\"restart-btn\">\n                  Get Sorted Again\n                </button>\n              </Link>\n            </div>\n            <img\n              src={mcgonagallImg}\n              alt=\"Minerva McGonagall\"\n              className=\"mcgonagall-img\"\n            />\n          </section>\n        )}\n        {this.state.resultError ||\n          (!this.props.userHouse && (\n            <Error errorMessage=\"Sorry, something went wrong.\" />\n          ))}\n      </section>\n    );\n  }\n}\n\nexport default Result\n\nResult.protoTypes = {\n  resetQuiz: PropTypes.func.isRequired,\n  userHouse: PropTypes.object.isRequired,\n  userName: PropTypes.string.isRequired,\n}\n","export const cleanCharacterData = (allCharacters, userHouse) => {\n  const houseMateDetails = allCharacters.filter((char) => {\n    return char.house === userHouse.name;\n  })\n  return houseMateDetails.map((char) => {\n    return {\n      _id: char._id,\n      name: char.name,\n    }\n  })\n}\n\nexport const cleanHouseData = (allHouses) => {\n  return allHouses.map((house) => {\n    return {\n      color1: house.color1,\n      color2: house.color2,\n      founder: house.founder,\n      headhOfHouse: house.headhOfHouse,\n      houseGhost: house.houseGhost,\n      mascot: house.mascot,\n      name: house.name,\n      value1: house.value1,\n      value2: house.value2,\n      value3: house.value3,\n      value4: house.value4,\n    }\n  })\n}\n","const getHogwartsHouses = () => {\n  return fetch(\"https://fe-cors-proxy.herokuapp.com\", {\n    headers: {\n      \"Target-URL\": \"https://potter-server.herokuapp.com/api/v1/houses\",\n    },\n  }).then((response) => response.json())\n}\n\nconst getAllCharacters = () => {\n  return fetch(\"https://fe-cors-proxy.herokuapp.com\", {\n    headers: {\n      \"Target-URL\": \"https://potter-server.herokuapp.com/api/v1/characters\",\n    },\n  }).then((response) => response.json())\n}\n\nexport { getHogwartsHouses, getAllCharacters }\n","import './App.scss'\nimport Intro from '../Intro/Intro'\nimport Name from '../Name/Name'\nimport Question from '../Question/Question'\nimport Result from '../Result/Result'\nimport Error from '../Error/Error'\nimport { getHogwartsHouses } from '../apiCalls'\nimport { cleanHouseData } from '../utilities'\nimport React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      userHouse: \"\",\n      userName: \"\",\n      questionResults: [],\n      hogwartsHouses: [],\n      houseFetchError: \"\"\n    }\n  }\n\n  componentDidMount() {\n    getHogwartsHouses()\n      .then(data => this.setState({\n        hogwartsHouses: cleanHouseData(data),\n        houseFetchError: \"\"\n      }))\n      .catch(error => this.setState({\n        houseFetchError: error\n      }))\n  }\n\n  setUserName = (enteredName) => {\n    this.setState({\n      userName: enteredName\n    })\n  }\n\n  tallyQuestionResults = (houseName) => {\n    this.setState({\n      questionResults: [...this.state.questionResults, houseName]\n    })\n  }\n\n  determineUserHouse = () => {\n    const houseCount = this.state.questionResults.reduce((houseDetails, house) => {\n      !houseDetails[house] ? houseDetails[house] = 1 : houseDetails[house] += 1\n      return houseDetails\n    }, {})\n\n    const sortedHouses = Object.keys(houseCount).sort((house1, house2) => {\n      return houseCount[house2] > houseCount[house1] ? 1 : -1\n    })\n\n    this.setState({\n      userHouse: this.state.hogwartsHouses.find(house => {\n        return house.name === sortedHouses[0]\n      })\n    })\n  }\n  \n  resetQuiz = () => {\n    this.setState({\n      userHouse: {},\n      questionResults: [],\n    })\n  }\n\n  render() {\n    return (\n      <main className=\"app\">\n        {!this.state.houseFetchError &&\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n              return (\n                <Intro />\n              )\n            }}\n          />\n          <Route \n            exact\n            path=\"/your-name\"\n            render={() => {\n              return (\n                <Name \n                  setUserName={ this.setUserName }\n                />\n              )\n            }}\n          />\n          <Route \n            exact\n            path=\"/question\"\n            render={() => {\n              return (\n                <Question \n                  tallyQuestionResults={ this.tallyQuestionResults }\n                  hogwartsHouses={ this.state.hogwartsHouses }\n                  questionNumber={ this.state.questionResults.length + 1 }\n                  determineUserHouse={ this.determineUserHouse }\n                />\n              )\n            }}\n          />\n          <Route \n            exact\n            path=\"/result\"\n            render={() => {\n              return (\n                <Result \n                  resetQuiz={ this.resetQuiz }\n                  userHouse={ this.state.userHouse }\n                  userName={ this.state.userName }\n                />\n              )\n            }}\n          />\n          <Route \n            path=\"/\"\n            render={() => {\n              return (\n                <Error \n                  errorMessage=\"Oops! This page does not exist.\"\n                />\n              )\n            }}\n          />\n        </Switch>}\n        {this.state.houseFetchError &&\n        <Error \n          errorMessage=\"Sorry, Something went wrong.\"\n        />\n        }\n      </main>\n    )\n  }\n}\n\nexport default App","import './index.scss'\nimport App from './App/App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst router = <BrowserRouter basename='/sorting-hat-quiz'><App /></BrowserRouter>\n\nReactDOM.render(\n  router,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}